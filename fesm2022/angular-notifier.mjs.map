{"version":3,"file":"angular-notifier.mjs","sources":["../../../projects/angular-notifier/src/lib/models/notifier-notification.model.ts","../../../projects/angular-notifier/src/lib/services/notifier-queue.service.ts","../../../projects/angular-notifier/src/lib/notifier.tokens.ts","../../../projects/angular-notifier/src/lib/models/notifier-config.model.ts","../../../projects/angular-notifier/src/lib/services/notifier.service.ts","../../../projects/angular-notifier/src/lib/services/notifier-timer.service.ts","../../../projects/angular-notifier/src/lib/animation-presets/fade.animation-preset.ts","../../../projects/angular-notifier/src/lib/animation-presets/slide.animation-preset.ts","../../../projects/angular-notifier/src/lib/services/notifier-animation.service.ts","../../../projects/angular-notifier/src/lib/components/notifier-notification.component.ts","../../../projects/angular-notifier/src/lib/components/notifier-notification.component.html","../../../projects/angular-notifier/src/lib/components/notifier-container.component.ts","../../../projects/angular-notifier/src/lib/components/notifier-container.component.html","../../../projects/angular-notifier/src/lib/notifier.module.ts","../../../projects/angular-notifier/src/angular-notifier.ts"],"sourcesContent":["import { TemplateRef } from '@angular/core';\r\n\r\nimport { NotifierNotificationComponent } from '../components/notifier-notification.component';\r\n\r\n/**\r\n * Notification\r\n *\r\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\r\n */\r\nexport class NotifierNotification {\r\n  /**\r\n   * Unique notification ID, can be set manually to control the notification from outside later on\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * Notification type, will be used for constructing an appropriate class name\r\n   */\r\n  public type: string;\r\n\r\n  /**\r\n   * Notification message\r\n   */\r\n  public message: string;\r\n  /**\r\n  * custom extras data to pass to notification template\r\n  */\r\n  public extras?: any;\r\n  /**\r\n   * The template to customize\r\n   * the appearance of the notification\r\n   */\r\n  public template?: TemplateRef<any> = null;\r\n\r\n  /**\r\n   * Component reference of this notification, created and set during creation time\r\n   */\r\n  public component: NotifierNotificationComponent;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param options Notifier options\r\n   */\r\n  public constructor(options: NotifierNotificationOptions) {\r\n    Object.assign(this, options);\r\n\r\n    // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\r\n    // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\r\n    // is not possible due to the action queue concept.\r\n    if (options.id === undefined) {\r\n      this.id = `ID_${new Date().getTime()}`;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Notifiction options\r\n *\r\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\r\n * call must provide.\r\n */\r\nexport interface NotifierNotificationOptions {\r\n  /**\r\n   * Notification ID, optional\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Notification type\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * Notificatin message\r\n   */\r\n  message: string;\r\n  /**\r\n  * custom extras data to \r\n  * pass to  custom notification template\r\n  */\r\n  extras?: any;\r\n\r\n  /**\r\n   * The template to customize\r\n   * the appearance of the notification\r\n   */\r\n  template?: TemplateRef<any>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { NotifierAction } from '../models/notifier-action.model';\r\n\r\n/**\r\n * Notifier queue service\r\n *\r\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\r\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\r\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\r\n * processes them at the right time (which is when the previous action has been processed successfully).\r\n *\r\n * Technical sidenote:\r\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\r\n */\r\n@Injectable()\r\nexport class NotifierQueueService {\r\n  /**\r\n   * Stream of actions, subscribable from outside\r\n   */\r\n  public readonly actionStream: Subject<NotifierAction>;\r\n\r\n  /**\r\n   * Queue of actions\r\n   */\r\n  private actionQueue: Array<NotifierAction>;\r\n\r\n  /**\r\n   * Flag, true if some action is currently in progress\r\n   */\r\n  private isActionInProgress: boolean;\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  public constructor() {\r\n    this.actionStream = new Subject<NotifierAction>();\r\n    this.actionQueue = [];\r\n    this.isActionInProgress = false;\r\n  }\r\n\r\n  /**\r\n   * Push a new action to the queue, and try to run it\r\n   *\r\n   * @param action Action object\r\n   */\r\n  public push(action: NotifierAction): void {\r\n    this.actionQueue.push(action);\r\n    this.tryToRunNextAction();\r\n  }\r\n\r\n  /**\r\n   * Continue with the next action (called when the current action is finished)\r\n   */\r\n  public continue(): void {\r\n    this.isActionInProgress = false;\r\n    this.tryToRunNextAction();\r\n  }\r\n\r\n  /**\r\n   * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\r\n   */\r\n  private tryToRunNextAction(): void {\r\n    if (this.isActionInProgress || this.actionQueue.length === 0) {\r\n      return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\r\n    }\r\n    this.isActionInProgress = true;\r\n    this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\r\n\r\n/**\r\n * Injection Token for notifier options\r\n */\r\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions> = new InjectionToken<NotifierOptions>(\r\n  '[angular-notifier] Notifier Options',\r\n);\r\n\r\n/**\r\n * Injection Token for notifier configuration\r\n */\r\nexport const NotifierConfigToken: InjectionToken<NotifierConfig> = new InjectionToken<NotifierConfig>('[anuglar-notifier] Notifier Config');\r\n","/**\r\n * Notifier options\r\n */\r\nexport interface NotifierOptions {\r\n  animations?: {\r\n    enabled?: boolean;\r\n    hide?: {\r\n      easing?: string;\r\n      offset?: number | false;\r\n      preset?: string;\r\n      speed?: number;\r\n    };\r\n    overlap?: number | false;\r\n    shift?: {\r\n      easing?: string;\r\n      speed?: number;\r\n    };\r\n    show?: {\r\n      easing?: string;\r\n      preset?: string;\r\n      speed?: number;\r\n    };\r\n  };\r\n  behaviour?: {\r\n    autoHide?: number | false;\r\n    onClick?: 'hide' | false;\r\n    onMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\r\n    showDismissButton?: boolean;\r\n    stacking?: number | false;\r\n  };\r\n  position?: {\r\n    horizontal?: {\r\n      distance?: number;\r\n      position?: 'left' | 'middle' | 'right';\r\n    };\r\n    vertical?: {\r\n      distance?: number;\r\n      gap?: number;\r\n      position?: 'top' | 'bottom';\r\n    };\r\n  };\r\n  theme?: string;\r\n}\r\n\r\n/**\r\n * Notifier configuration\r\n *\r\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\r\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\r\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\r\n */\r\nexport class NotifierConfig implements NotifierOptions {\r\n  /**\r\n   * Customize animations\r\n   */\r\n  public animations: {\r\n    enabled: boolean;\r\n    hide: {\r\n      easing: string;\r\n      offset: number | false;\r\n      preset: string;\r\n      speed: number;\r\n    };\r\n    overlap: number | false;\r\n    shift: {\r\n      easing: string;\r\n      speed: number;\r\n    };\r\n    show: {\r\n      easing: string;\r\n      preset: string;\r\n      speed: number;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Customize behaviour\r\n   */\r\n  public behaviour: {\r\n    autoHide: number | false;\r\n    onClick: 'hide' | false;\r\n    onMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\r\n    showDismissButton: boolean;\r\n    stacking: number | false;\r\n  };\r\n\r\n  /**\r\n   * Customize positioning\r\n   */\r\n  public position: {\r\n    horizontal: {\r\n      distance: number;\r\n      position: 'left' | 'middle' | 'right';\r\n    };\r\n    vertical: {\r\n      distance: number;\r\n      gap: number;\r\n      position: 'top' | 'bottom';\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Customize theming\r\n   */\r\n  public theme: string;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param [customOptions={}] Custom notifier options, optional\r\n   */\r\n  public constructor(customOptions: NotifierOptions = {}) {\r\n    // Set default values\r\n    this.animations = {\r\n      enabled: true,\r\n      hide: {\r\n        easing: 'ease',\r\n        offset: 50,\r\n        preset: 'fade',\r\n        speed: 300,\r\n      },\r\n      overlap: 150,\r\n      shift: {\r\n        easing: 'ease',\r\n        speed: 300,\r\n      },\r\n      show: {\r\n        easing: 'ease',\r\n        preset: 'slide',\r\n        speed: 300,\r\n      },\r\n    };\r\n    this.behaviour = {\r\n      autoHide: 7000,\r\n      onClick: false,\r\n      onMouseover: 'pauseAutoHide',\r\n      showDismissButton: true,\r\n      stacking: 4,\r\n    };\r\n    this.position = {\r\n      horizontal: {\r\n        distance: 12,\r\n        position: 'left',\r\n      },\r\n      vertical: {\r\n        distance: 12,\r\n        gap: 10,\r\n        position: 'bottom',\r\n      },\r\n    };\r\n    this.theme = 'material';\r\n\r\n    // The following merges the custom options into the notifier config, respecting the already set default values\r\n    // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\r\n    // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\r\n    if (customOptions.theme !== undefined) {\r\n      this.theme = customOptions.theme;\r\n    }\r\n    if (customOptions.animations !== undefined) {\r\n      if (customOptions.animations.enabled !== undefined) {\r\n        this.animations.enabled = customOptions.animations.enabled;\r\n      }\r\n      if (customOptions.animations.overlap !== undefined) {\r\n        this.animations.overlap = customOptions.animations.overlap;\r\n      }\r\n      if (customOptions.animations.hide !== undefined) {\r\n        Object.assign(this.animations.hide, customOptions.animations.hide);\r\n      }\r\n      if (customOptions.animations.shift !== undefined) {\r\n        Object.assign(this.animations.shift, customOptions.animations.shift);\r\n      }\r\n      if (customOptions.animations.show !== undefined) {\r\n        Object.assign(this.animations.show, customOptions.animations.show);\r\n      }\r\n    }\r\n    if (customOptions.behaviour !== undefined) {\r\n      Object.assign(this.behaviour, customOptions.behaviour);\r\n    }\r\n    if (customOptions.position !== undefined) {\r\n      if (customOptions.position.horizontal !== undefined) {\r\n        Object.assign(this.position.horizontal, customOptions.position.horizontal);\r\n      }\r\n      if (customOptions.position.vertical !== undefined) {\r\n        Object.assign(this.position.vertical, customOptions.position.vertical);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NotifierAction } from '../models/notifier-action.model';\r\nimport { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\r\nimport { NotifierConfigToken } from '../notifier.tokens';\r\nimport { NotifierQueueService } from './notifier-queue.service';\r\n\r\n/**\r\n * Notifier service\r\n *\r\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\r\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\r\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\r\n */\r\n@Injectable()\r\nexport class NotifierService {\r\n  /**\r\n   * Notifier queue service\r\n   */\r\n  private readonly queueService: NotifierQueueService;\r\n\r\n  /**\r\n   * Notifier configuration\r\n   */\r\n  private readonly config: NotifierConfig;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param notifierQueueService Notifier queue service\r\n   * @param config               Notifier configuration, optionally injected as a dependency\r\n   */\r\n  public constructor(notifierQueueService: NotifierQueueService, @Inject(NotifierConfigToken) config: NotifierConfig) {\r\n    this.queueService = notifierQueueService;\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Get the notifier configuration\r\n   *\r\n   * @returns Notifier configuration\r\n   */\r\n  public getConfig(): NotifierConfig {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Get the observable for handling actions\r\n   *\r\n   * @returns Observable of NotifierAction\r\n   */\r\n  public get actionStream(): Observable<NotifierAction> {\r\n    return this.queueService.actionStream.asObservable();\r\n  }\r\n\r\n  /**\r\n   * API: Show a new notification\r\n   *\r\n   * @param notificationOptions Notification options\r\n   */\r\n  public show(notificationOptions: NotifierNotificationOptions): void {\r\n    this.queueService.push({\r\n      payload: notificationOptions,\r\n      type: 'SHOW',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API: Hide a specific notification, given its ID\r\n   *\r\n   * @param notificationId ID of the notification to hide\r\n   */\r\n  public hide(notificationId: string): void {\r\n    this.queueService.push({\r\n      payload: notificationId,\r\n      type: 'HIDE',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API: Hide the newest notification\r\n   */\r\n  public hideNewest(): void {\r\n    this.queueService.push({\r\n      type: 'HIDE_NEWEST',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API: Hide the oldest notification\r\n   */\r\n  public hideOldest(): void {\r\n    this.queueService.push({\r\n      type: 'HIDE_OLDEST',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API: Hide all notifications at once\r\n   */\r\n  public hideAll(): void {\r\n    this.queueService.push({\r\n      type: 'HIDE_ALL',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API: Shortcut for showing a new notification\r\n   *\r\n   * @param type             Type of the notification\r\n   * @param message          Message of the notification\r\n   * @param [notificationId] Unique ID for the notification (optional)\r\n   */\r\n  public notify(type: string, message: string, notificationId?: string): void {\r\n    const notificationOptions: NotifierNotificationOptions = {\r\n      message,\r\n      type,\r\n    };\r\n    if (notificationId !== undefined) {\r\n      notificationOptions.id = notificationId;\r\n    }\r\n    this.show(notificationOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Notifier timer service\r\n *\r\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\r\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\r\n */\r\n@Injectable()\r\nexport class NotifierTimerService {\r\n  /**\r\n   * Timestamp (in ms), created in the moment the timer starts\r\n   */\r\n  private now: number;\r\n\r\n  /**\r\n   * Remaining time (in ms)\r\n   */\r\n  private remaining: number;\r\n\r\n  /**\r\n   * Timeout ID, used for clearing the timeout later on\r\n   */\r\n  private timerId: number;\r\n\r\n  /**\r\n   * Promise resolve function, eventually getting called once the timer finishes\r\n   */\r\n  private finishPromiseResolver: () => void;\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  public constructor() {\r\n    this.now = 0;\r\n    this.remaining = 0;\r\n  }\r\n\r\n  /**\r\n   * Start (or resume) the timer\r\n   *\r\n   * @param   duration Timer duration, in ms\r\n   * @returns          Promise, resolved once the timer finishes\r\n   */\r\n  public start(duration: number): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      // For the first run ...\r\n      this.remaining = duration;\r\n\r\n      // Setup, then start the timer\r\n      this.finishPromiseResolver = resolve;\r\n      this.continue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause the timer\r\n   */\r\n  public pause(): void {\r\n    clearTimeout(this.timerId);\r\n    this.remaining -= new Date().getTime() - this.now;\r\n  }\r\n\r\n  /**\r\n   * Continue the timer\r\n   */\r\n  public continue(): void {\r\n    this.now = new Date().getTime();\r\n    this.timerId = window.setTimeout(() => {\r\n      this.finish();\r\n    }, this.remaining);\r\n  }\r\n\r\n  /**\r\n   * Stop the timer\r\n   */\r\n  public stop(): void {\r\n    clearTimeout(this.timerId);\r\n    this.remaining = 0;\r\n  }\r\n\r\n  /**\r\n   * Finish up the timeout by resolving the timer promise\r\n   */\r\n  private finish(): void {\r\n    this.finishPromiseResolver();\r\n  }\r\n}\r\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\r\n\r\n/**\r\n * Fade animation preset\r\n */\r\nexport const fade: NotifierAnimationPreset = {\r\n  hide: (): NotifierAnimationPresetKeyframes => {\r\n    return {\r\n      from: {\r\n        opacity: '1',\r\n      },\r\n      to: {\r\n        opacity: '0',\r\n      },\r\n    };\r\n  },\r\n  show: (): NotifierAnimationPresetKeyframes => {\r\n    return {\r\n      from: {\r\n        opacity: '0',\r\n      },\r\n      to: {\r\n        opacity: '1',\r\n      },\r\n    };\r\n  },\r\n};\r\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\r\nimport { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotification } from '../models/notifier-notification.model';\r\n\r\n/**\r\n * Slide animation preset\r\n */\r\nexport const slide: NotifierAnimationPreset = {\r\n  hide: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\r\n    // Prepare variables\r\n    const config: NotifierConfig = notification.component.getConfig();\r\n    const shift: number = notification.component.getShift();\r\n    let from: {\r\n      [animatablePropertyName: string]: string;\r\n    };\r\n    let to: {\r\n      [animatablePropertyName: string]: string;\r\n    };\r\n\r\n    // Configure variables, depending on configuration and component\r\n    if (config.position.horizontal.position === 'left') {\r\n      from = {\r\n        transform: `translate3d( 0, ${shift}px, 0 )`,\r\n      };\r\n      to = {\r\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,\r\n      };\r\n    } else if (config.position.horizontal.position === 'right') {\r\n      from = {\r\n        transform: `translate3d( 0, ${shift}px, 0 )`,\r\n      };\r\n      to = {\r\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,\r\n      };\r\n    } else {\r\n      let horizontalPosition: string;\r\n      if (config.position.vertical.position === 'top') {\r\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\r\n      } else {\r\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\r\n      }\r\n      from = {\r\n        transform: `translate3d( -50%, ${shift}px, 0 )`,\r\n      };\r\n      to = {\r\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\r\n      };\r\n    }\r\n\r\n    // Done\r\n    return {\r\n      from,\r\n      to,\r\n    };\r\n  },\r\n  show: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\r\n    // Prepare variables\r\n    const config: NotifierConfig = notification.component.getConfig();\r\n    let from: {\r\n      [animatablePropertyName: string]: string;\r\n    };\r\n    let to: {\r\n      [animatablePropertyName: string]: string;\r\n    };\r\n\r\n    // Configure variables, depending on configuration and component\r\n    if (config.position.horizontal.position === 'left') {\r\n      from = {\r\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,\r\n      };\r\n      to = {\r\n        transform: 'translate3d( 0, 0, 0 )',\r\n      };\r\n    } else if (config.position.horizontal.position === 'right') {\r\n      from = {\r\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,\r\n      };\r\n      to = {\r\n        transform: 'translate3d( 0, 0, 0 )',\r\n      };\r\n    } else {\r\n      let horizontalPosition: string;\r\n      if (config.position.vertical.position === 'top') {\r\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\r\n      } else {\r\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\r\n      }\r\n      from = {\r\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\r\n      };\r\n      to = {\r\n        transform: 'translate3d( -50%, 0, 0 )',\r\n      };\r\n    }\r\n\r\n    // Done\r\n    return {\r\n      from,\r\n      to,\r\n    };\r\n  },\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { fade } from '../animation-presets/fade.animation-preset';\r\nimport { slide } from '../animation-presets/slide.animation-preset';\r\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\r\nimport { NotifierNotification } from '../models/notifier-notification.model';\r\n\r\n/**\r\n * Notifier animation service\r\n */\r\n@Injectable()\r\nexport class NotifierAnimationService {\r\n  /**\r\n   * List of animation presets (currently static)\r\n   */\r\n  private readonly animationPresets: {\r\n    [animationPresetName: string]: NotifierAnimationPreset;\r\n  };\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  public constructor() {\r\n    this.animationPresets = {\r\n      fade,\r\n      slide,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get animation data\r\n   *\r\n   * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\r\n   * direction (either in or out) as well as the notifications (and its attributes) itself.\r\n   *\r\n   * @param   direction    Animation direction, either in or out\r\n   * @param   notification Notification the animation data should be generated for\r\n   * @returns Animation information\r\n   */\r\n  public getAnimationData(direction: 'show' | 'hide', notification: NotifierNotification): NotifierAnimationData {\r\n    // Get all necessary animation data\r\n    let keyframes: NotifierAnimationPresetKeyframes;\r\n    let duration: number;\r\n    let easing: string;\r\n    if (direction === 'show') {\r\n      keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\r\n      duration = notification.component.getConfig().animations.show.speed;\r\n      easing = notification.component.getConfig().animations.show.easing;\r\n    } else {\r\n      keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\r\n      duration = notification.component.getConfig().animations.hide.speed;\r\n      easing = notification.component.getConfig().animations.hide.easing;\r\n    }\r\n\r\n    // Build and return animation data\r\n    return {\r\n      keyframes: [keyframes.from, keyframes.to],\r\n      options: {\r\n        duration,\r\n        easing,\r\n        fill: 'forwards', // Keep the newly painted state after the animation finished\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\n\r\nimport { NotifierAnimationData } from '../models/notifier-animation.model';\r\nimport { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotification } from '../models/notifier-notification.model';\r\nimport { NotifierService } from '../services/notifier.service';\r\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\r\nimport { NotifierTimerService } from '../services/notifier-timer.service';\r\n\r\n/**\r\n * Notifier notification component\r\n * -------------------------------\r\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\r\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\r\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\r\n * mouse movements.\r\n */\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\r\n  host: {\r\n    '(click)': 'onNotificationClick()',\r\n    '(mouseout)': 'onNotificationMouseout()',\r\n    '(mouseover)': 'onNotificationMouseover()',\r\n    class: 'notifier__notification',\r\n  },\r\n  providers: [\r\n    // We provide the timer to the component's local injector, so that every notification components gets its own\r\n    // instance of the timer service, thus running their timers independently from each other\r\n    NotifierTimerService,\r\n  ],\r\n  selector: 'notifier-notification',\r\n  templateUrl: './notifier-notification.component.html',\r\n})\r\nexport class NotifierNotificationComponent implements AfterViewInit {\r\n  /**\r\n   * Input: Notification object, contains all details necessary to construct the notification\r\n   */\r\n  @Input()\r\n  public notification: NotifierNotification;\r\n\r\n  /**\r\n   * Output: Ready event, handles the initialization success by emitting a reference to this notification component\r\n   */\r\n  @Output()\r\n  public ready: EventEmitter<NotifierNotificationComponent>;\r\n\r\n  /**\r\n   * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\r\n   */\r\n  @Output()\r\n  public dismiss: EventEmitter<string>;\r\n\r\n  @Output()\r\n  customAction: EventEmitter<{\r\n    notificationId: string;\r\n    actionName: string;\r\n    actionPayload: any;\r\n  }>;\r\n  /**\r\n   * Notifier configuration\r\n   */\r\n  public readonly config: NotifierConfig;\r\n\r\n  /**\r\n   * Notifier timer service\r\n   */\r\n  private readonly timerService: NotifierTimerService;\r\n\r\n  /**\r\n   * Notifier animation service\r\n   */\r\n  private readonly animationService: NotifierAnimationService;\r\n\r\n  /**\r\n   * Angular renderer, used to preserve the overall DOM abstraction & independence\r\n   */\r\n  private readonly renderer: Renderer2;\r\n\r\n  /**\r\n   * Native element reference, used for manipulating DOM properties\r\n   */\r\n  private readonly element: HTMLElement;\r\n\r\n  /**\r\n   * Current notification height, calculated and cached here (#perfmatters)\r\n   */\r\n  private elementHeight: number;\r\n\r\n  /**\r\n   * Current notification width, calculated and cached here (#perfmatters)\r\n   */\r\n  private elementWidth: number;\r\n\r\n  /**\r\n   * Current notification shift, calculated and cached here (#perfmatters)\r\n   */\r\n  private elementShift: number;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param elementRef               Reference to the component's element\r\n   * @param renderer                 Angular renderer\r\n   * @param notifierService          Notifier service\r\n   * @param notifierTimerService     Notifier timer service\r\n   * @param notifierAnimationService Notifier animation service\r\n   */\r\n  public constructor(\r\n    elementRef: ElementRef,\r\n    renderer: Renderer2,\r\n    notifierService: NotifierService,\r\n    notifierTimerService: NotifierTimerService,\r\n    notifierAnimationService: NotifierAnimationService,\r\n  ) {\r\n    this.config = notifierService.getConfig();\r\n    this.ready = new EventEmitter<NotifierNotificationComponent>();\r\n    this.dismiss = new EventEmitter<string>();\r\n    this.customAction = new EventEmitter<{\r\n      notificationId: string;\r\n      actionName: string;\r\n      actionPayload: any;\r\n    }>();\r\n    this.timerService = notifierTimerService;\r\n    this.animationService = notifierAnimationService;\r\n    this.renderer = renderer;\r\n    this.element = elementRef.nativeElement;\r\n    this.elementShift = 0;\r\n  }\r\n\r\n  /**\r\n   * Component after view init lifecycle hook, setts up the component and then emits the ready event\r\n   */\r\n  public ngAfterViewInit(): void {\r\n    this.setup();\r\n    this.elementHeight = this.element.offsetHeight;\r\n    this.elementWidth = this.element.offsetWidth;\r\n    this.ready.emit(this);\r\n  }\r\n\r\n  /**\r\n   * Get the notifier config\r\n   *\r\n   * @returns Notifier configuration\r\n   */\r\n  public getConfig(): NotifierConfig {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Get notification element height (in px)\r\n   *\r\n   * @returns Notification element height (in px)\r\n   */\r\n  public getHeight(): number {\r\n    return this.elementHeight;\r\n  }\r\n\r\n  /**\r\n   * Get notification element width (in px)\r\n   *\r\n   * @returns Notification element height (in px)\r\n   */\r\n  public getWidth(): number {\r\n    return this.elementWidth;\r\n  }\r\n\r\n  /**\r\n   * Get notification shift offset (in px)\r\n   *\r\n   * @returns Notification element shift offset (in px)\r\n   */\r\n  public getShift(): number {\r\n    return this.elementShift;\r\n  }\r\n\r\n  /**\r\n   * Show (animate in) this notification\r\n   *\r\n   * @returns Promise, resolved when done\r\n   */\r\n  public show(): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      // Are animations enabled?\r\n      if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\r\n        // Get animation data\r\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('show', this.notification);\r\n\r\n        // Set initial styles (styles before animation), prevents quick flicker when animation starts\r\n        const animatedProperties: Array<string> = Object.keys(animationData.keyframes[0]);\r\n        for (let i: number = animatedProperties.length - 1; i >= 0; i--) {\r\n          this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\r\n        }\r\n\r\n        // Animate notification in\r\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\r\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\r\n        animation.onfinish = () => {\r\n          this.startAutoHideTimer();\r\n          resolve(); // Done\r\n        };\r\n      } else {\r\n        // Show notification\r\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\r\n        this.startAutoHideTimer();\r\n        resolve(); // Done\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Hide (animate out) this notification\r\n   *\r\n   * @returns Promise, resolved when done\r\n   */\r\n  public hide(): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      this.stopAutoHideTimer();\r\n\r\n      // Are animations enabled?\r\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\r\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('hide', this.notification);\r\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\r\n        animation.onfinish = () => {\r\n          resolve(); // Done\r\n        };\r\n      } else {\r\n        resolve(); // Done\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shift (move) this notification\r\n   *\r\n   * @param   distance         Distance to shift (in px)\r\n   * @param   shiftToMakePlace Flag, defining in which direction to shift\r\n   * @returns Promise, resolved when done\r\n   */\r\n  public shift(distance: number, shiftToMakePlace: boolean): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      // Calculate new position (position after the shift)\r\n      let newElementShift: number;\r\n      if (\r\n        (this.config.position.vertical.position === 'top' && shiftToMakePlace) ||\r\n        (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)\r\n      ) {\r\n        newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\r\n      } else {\r\n        newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\r\n      }\r\n      const horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\r\n\r\n      // Are animations enabled?\r\n      if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\r\n        const animationData: NotifierAnimationData = {\r\n          // TODO: Extract into animation service\r\n          keyframes: [\r\n            {\r\n              transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,\r\n            },\r\n            {\r\n              transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,\r\n            },\r\n          ],\r\n          options: {\r\n            duration: this.config.animations.shift.speed,\r\n            easing: this.config.animations.shift.easing,\r\n            fill: 'forwards',\r\n          },\r\n        };\r\n        this.elementShift = newElementShift;\r\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\r\n        animation.onfinish = () => {\r\n          resolve(); // Done\r\n        };\r\n      } else {\r\n        this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\r\n        this.elementShift = newElementShift;\r\n        resolve(); // Done\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle click on dismiss button\r\n   */\r\n  public onClickDismiss(): void {\r\n    this.dismiss.emit(this.notification.id);\r\n  }\r\n\r\n  /**\r\n   * Handle mouseover over notification area\r\n   */\r\n  public onNotificationMouseover(): void {\r\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\r\n      this.pauseAutoHideTimer();\r\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\r\n      this.stopAutoHideTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle mouseout from notification area\r\n   */\r\n  public onNotificationMouseout(): void {\r\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\r\n      this.continueAutoHideTimer();\r\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\r\n      this.startAutoHideTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle click on notification area\r\n   */\r\n  public onNotificationClick(): void {\r\n    if (this.config.behaviour.onClick === 'hide') {\r\n      this.onClickDismiss();\r\n    }\r\n  }\r\n  /**\r\n   * Handle custom action\r\n   */\r\n  public onCustomAction(name: string, payload: any): void {\r\n    this.customAction.emit({ notificationId: this.notification.id, actionName: name, actionPayload: payload });\r\n  }\r\n  /**\r\n   * Start the auto hide timer (if enabled)\r\n   */\r\n  private startAutoHideTimer(): void {\r\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\r\n      this.timerService.start(this.config.behaviour.autoHide).then(() => {\r\n        this.onClickDismiss();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pause the auto hide timer (if enabled)\r\n   */\r\n  private pauseAutoHideTimer(): void {\r\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\r\n      this.timerService.pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Continue the auto hide timer (if enabled)\r\n   */\r\n  private continueAutoHideTimer(): void {\r\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\r\n      this.timerService.continue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the auto hide timer (if enabled)\r\n   */\r\n  private stopAutoHideTimer(): void {\r\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\r\n      this.timerService.stop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initial notification setup\r\n   */\r\n  private setup(): void {\r\n    // Set start position (initially the exact same for every new notification)\r\n    if (this.config.position.horizontal.position === 'left') {\r\n      this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\r\n    } else if (this.config.position.horizontal.position === 'right') {\r\n      this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\r\n    } else {\r\n      this.renderer.setStyle(this.element, 'left', '50%');\r\n      // Let's get the GPU handle some work as well (#perfmatters)\r\n      this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\r\n    }\r\n    if (this.config.position.vertical.position === 'top') {\r\n      this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\r\n    } else {\r\n      this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\r\n    }\r\n\r\n    // Add classes (responsible for visual design)\r\n    this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\r\n    this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\r\n  }\r\n}\r\n","<ng-container\r\n  *ngIf=\"notification.template; else predefinedNotification\"\r\n  [ngTemplateOutlet]=\"notification.template\"\r\n    [ngTemplateOutletContext]=\"{ notification: notification, context: this }\"\r\n>\r\n</ng-container>\r\n\r\n<ng-template #predefinedNotification>\r\n  <p class=\"notifier__notification-message\">{{ notification.message }}</p>\r\n  <button\r\n    class=\"notifier__notification-button\"\r\n    type=\"button\"\r\n    title=\"dismiss\"\r\n    *ngIf=\"config.behaviour.showDismissButton\"\r\n    (click)=\"onClickDismiss()\"\r\n  >\r\n    <svg class=\"notifier__notification-button-icon\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\r\n      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n    </svg>\r\n  </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, OnDestroy, Output } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { NotifierAction } from '../models/notifier-action.model';\r\nimport { NotifierConfig } from '../models/notifier-config.model';\r\nimport { NotifierNotification } from '../models/notifier-notification.model';\r\nimport { NotifierService } from '../services/notifier.service';\r\nimport { NotifierQueueService } from '../services/notifier-queue.service';\r\nimport { NotifierNotificationComponent } from './notifier-notification.component';\r\n\r\n/**\r\n * Notifier container component\r\n * ----------------------------\r\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\r\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\r\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\r\n * by subscribing to its action stream.\r\n *\r\n * Technical sidenote:\r\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\r\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\r\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\r\n */\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\r\n  host: {\r\n    class: 'notifier__container',\r\n  },\r\n  selector: 'notifier-container',\r\n  templateUrl: './notifier-container.component.html',\r\n})\r\nexport class NotifierContainerComponent implements OnDestroy {\r\n  /**\r\n   * List of currently somewhat active notifications\r\n   */\r\n  public notifications: Array<NotifierNotification>;\r\n  /**\r\n   * custom action event emmitter\r\n   * notification custom action event emmitter\r\n   */\r\n  @Output()\r\n  public notificationCustomAction: EventEmitter<any>;\r\n  /**\r\n   * Change detector\r\n   */\r\n  private readonly changeDetector: ChangeDetectorRef;\r\n\r\n  /**\r\n   * Notifier queue service\r\n   */\r\n  private readonly queueService: NotifierQueueService;\r\n\r\n  /**\r\n   * Notifier configuration\r\n   */\r\n  private readonly config: NotifierConfig;\r\n\r\n  /**\r\n   * Queue service observable subscription (saved for cleanup)\r\n   */\r\n  private queueServiceSubscription: Subscription;\r\n\r\n  /**\r\n   * Promise resolve function reference, temporarily used while the notification child component gets created\r\n   */\r\n  private tempPromiseResolver: () => void;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param changeDetector       Change detector, used for manually triggering change detection runs\r\n   * @param notifierQueueService Notifier queue service\r\n   * @param notifierService      Notifier service\r\n   */\r\n  public constructor(changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService) {\r\n    this.changeDetector = changeDetector;\r\n    this.queueService = notifierQueueService;\r\n    this.config = notifierService.getConfig();\r\n    this.notifications = [];\r\n    this.notificationCustomAction = new EventEmitter<any>();\r\n    // Connects this component up to the action queue, then handle incoming actions\r\n    this.queueServiceSubscription = this.queueService.actionStream.subscribe((action: NotifierAction) => {\r\n      this.handleAction(action).then(() => {\r\n        this.queueService.continue();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Component destroyment lifecycle hook, cleans up the observable subsciption\r\n   */\r\n  public ngOnDestroy(): void {\r\n    if (this.queueServiceSubscription) {\r\n      this.queueServiceSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notification identifier, used as the ngFor trackby function\r\n   *\r\n   * @param   index        Index\r\n   * @param   notification Notifier notification\r\n   * @returns Notification ID as the unique identnfier\r\n   */\r\n  public identifyNotification(index: number, notification: NotifierNotification): string {\r\n    return notification.id;\r\n  }\r\n\r\n  /**\r\n   * Event handler, handles clicks on notification dismiss buttons\r\n   *\r\n   * @param notificationId ID of the notification to dismiss\r\n   */\r\n  public onNotificationDismiss(notificationId: string): void {\r\n    this.queueService.push({\r\n      payload: notificationId,\r\n      type: 'HIDE',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Event handler, handles notification ready events\r\n   *\r\n   * @param notificationComponent Notification component reference\r\n   */\r\n  public onNotificationReady(notificationComponent: NotifierNotificationComponent): void {\r\n    const currentNotification: NotifierNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\r\n    currentNotification.component = notificationComponent; // Save the new omponent reference\r\n    this.continueHandleShowAction(currentNotification); // Continue with handling the show action\r\n  }\r\n\r\n  /**\r\n   * Event handler, handles custom actions\r\n   *\r\n   * @param action\r\n   */\r\n  onNotificationCustomAction(action: { notificationId: string; actionName: string; actionPayload: any }) {\r\n    this.queueService.push({\r\n      payload: action,\r\n      type: 'CUSTOM_ACTION',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle incoming actions by mapping action types to methods, and then running them\r\n   *\r\n   * @param   action Action object\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleAction(action: NotifierAction): Promise<void> {\r\n    switch (\r\n      action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\r\n    ) {\r\n      case 'SHOW':\r\n        return this.handleShowAction(action);\r\n      case 'HIDE':\r\n        return this.handleHideAction(action);\r\n      case 'HIDE_OLDEST':\r\n        return this.handleHideOldestAction(action);\r\n      case 'HIDE_NEWEST':\r\n        return this.handleHideNewestAction(action);\r\n\r\n      case 'HIDE_ALL':\r\n        return this.handleHideAllAction();\r\n      case 'CUSTOM_ACTION':\r\n        return this.handleCustomAction(action);\r\n      default:\r\n        return new Promise<void>((resolve: () => void) => {\r\n          resolve(); // Ignore unknown action types\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show a new notification\r\n   *\r\n   * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\r\n   *\r\n   * @param   action Action object\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleShowAction(action: NotifierAction): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\r\n      this.addNotificationToList(new NotifierNotification(action.payload));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Continue to show a new notification (after the notification components is initialized / created / rendered).\r\n   *\r\n   * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\r\n   * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\r\n   * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\r\n   * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\r\n   *\r\n   * @param notification New notification to show\r\n   */\r\n  private continueHandleShowAction(notification: NotifierNotification): void {\r\n    // First (which means only one) notification in the list?\r\n    const numberOfNotifications: number = this.notifications.length;\r\n    if (numberOfNotifications === 1) {\r\n      notification.component.show().then(this.tempPromiseResolver); // Done\r\n    } else {\r\n      const implicitStackingLimit = 2;\r\n\r\n      // Stacking enabled? (stacking value below 2 means stacking is disabled)\r\n      if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\r\n        this.notifications[0].component.hide().then(() => {\r\n          this.removeNotificationFromList(this.notifications[0]);\r\n          notification.component.show().then(this.tempPromiseResolver); // Done\r\n        });\r\n      } else {\r\n        const stepPromises: Array<Promise<void>> = [];\r\n\r\n        // Are there now too many notifications?\r\n        if (numberOfNotifications > this.config.behaviour.stacking) {\r\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(1, numberOfNotifications - 1);\r\n\r\n          // Are animations enabled?\r\n          if (this.config.animations.enabled) {\r\n            // Is animation overlap enabled?\r\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\r\n              stepPromises.push(this.notifications[0].component.hide());\r\n              setTimeout(() => {\r\n                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\r\n              }, this.config.animations.hide.speed - this.config.animations.overlap);\r\n              setTimeout(() => {\r\n                stepPromises.push(notification.component.show());\r\n              }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\r\n            } else {\r\n              stepPromises.push(\r\n                new Promise<void>((resolve: () => void) => {\r\n                  this.notifications[0].component.hide().then(() => {\r\n                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\r\n                      notification.component.show().then(resolve);\r\n                    });\r\n                  });\r\n                }),\r\n              );\r\n            }\r\n          } else {\r\n            stepPromises.push(this.notifications[0].component.hide());\r\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\r\n            stepPromises.push(notification.component.show());\r\n          }\r\n        } else {\r\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, numberOfNotifications - 1);\r\n\r\n          // Are animations enabled?\r\n          if (this.config.animations.enabled) {\r\n            // Is animation overlap enabled?\r\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\r\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\r\n              setTimeout(() => {\r\n                stepPromises.push(notification.component.show());\r\n              }, this.config.animations.shift.speed - this.config.animations.overlap);\r\n            } else {\r\n              stepPromises.push(\r\n                new Promise<void>((resolve: () => void) => {\r\n                  this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\r\n                    notification.component.show().then(resolve);\r\n                  });\r\n                }),\r\n              );\r\n            }\r\n          } else {\r\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\r\n            stepPromises.push(notification.component.show());\r\n          }\r\n        }\r\n\r\n        Promise.all(stepPromises).then(() => {\r\n          if (this.config.behaviour.stacking !== false && numberOfNotifications > this.config.behaviour.stacking) {\r\n            this.removeNotificationFromList(this.notifications[0]);\r\n          }\r\n          this.tempPromiseResolver();\r\n        }); // Done\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide an existing notification\r\n   *\r\n   * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\r\n   * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\r\n   * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\r\n   *\r\n   * @param   action Action object, payload contains the notification ID\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleHideAction(action: NotifierAction): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      const stepPromises: Array<Promise<void>> = [];\r\n\r\n      // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\r\n      const notification: NotifierNotification | undefined = this.findNotificationById(action.payload);\r\n      if (notification === undefined) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // Get older notifications\r\n      const notificationIndex: number | undefined = this.findNotificationIndexById(action.payload);\r\n      if (notificationIndex === undefined) {\r\n        resolve();\r\n        return;\r\n      }\r\n      const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, notificationIndex);\r\n\r\n      // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\r\n      if (oldNotifications.length > 0) {\r\n        // Are animations enabled?\r\n        if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\r\n          // Is animation overlap enabled?\r\n          if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\r\n            stepPromises.push(notification.component.hide());\r\n            setTimeout(() => {\r\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\r\n            }, this.config.animations.hide.speed - this.config.animations.overlap);\r\n          } else {\r\n            notification.component.hide().then(() => {\r\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\r\n            });\r\n          }\r\n        } else {\r\n          stepPromises.push(notification.component.hide());\r\n          stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\r\n        }\r\n      } else {\r\n        stepPromises.push(notification.component.hide());\r\n      }\r\n\r\n      // Wait until both hiding and shifting is done, then remove the notification from the list\r\n      Promise.all(stepPromises).then(() => {\r\n        this.removeNotificationFromList(notification);\r\n        resolve(); // Done\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Hide the oldest notification (bridge to handleHideAction)\r\n   *\r\n   * @param   action Action object\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleHideOldestAction(action: NotifierAction): Promise<void> {\r\n    // Are there any notifications? (prevent accidential errors)\r\n    if (this.notifications.length === 0) {\r\n      return new Promise<void>((resolve: () => void) => {\r\n        resolve();\r\n      }); // Done\r\n    } else {\r\n      action.payload = this.notifications[0].id;\r\n      return this.handleHideAction(action);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide the newest notification (bridge to handleHideAction)\r\n   *\r\n   * @param   action Action object\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleHideNewestAction(action: NotifierAction): Promise<void> {\r\n    // Are there any notifications? (prevent accidential errors)\r\n    if (this.notifications.length === 0) {\r\n      return new Promise<void>((resolve: () => void) => {\r\n        resolve();\r\n      }); // Done\r\n    } else {\r\n      action.payload = this.notifications[this.notifications.length - 1].id;\r\n      return this.handleHideAction(action);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide all notifications at once\r\n   *\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private handleHideAllAction(): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      // Are there any notifications? (prevent accidential errors)\r\n      const numberOfNotifications: number = this.notifications.length;\r\n      if (numberOfNotifications === 0) {\r\n        resolve(); // Done\r\n        return;\r\n      }\r\n\r\n      // Are animations enabled?\r\n      if (\r\n        this.config.animations.enabled &&\r\n        this.config.animations.hide.speed > 0 &&\r\n        this.config.animations.hide.offset !== false &&\r\n        this.config.animations.hide.offset > 0\r\n      ) {\r\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\r\n          const animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\r\n          setTimeout(() => {\r\n            this.notifications[i].component.hide().then(() => {\r\n              // Are we done here, was this the last notification to be hidden?\r\n              if (\r\n                (this.config.position.vertical.position === 'top' && i === 0) ||\r\n                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)\r\n              ) {\r\n                this.removeAllNotificationsFromList();\r\n                resolve(); // Done\r\n              }\r\n            });\r\n          }, this.config.animations.hide.offset * animationOffset);\r\n        }\r\n      } else {\r\n        const stepPromises: Array<Promise<void>> = [];\r\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\r\n          stepPromises.push(this.notifications[i].component.hide());\r\n        }\r\n        Promise.all(stepPromises).then(() => {\r\n          this.removeAllNotificationsFromList();\r\n          resolve(); // Done\r\n        });\r\n      }\r\n    });\r\n  }\r\n  private handleCustomAction(action: NotifierAction): Promise<void> {\r\n    this.notificationCustomAction.emit({ name: action.payload.actionName, payload: action.payload.actionPayload });\r\n    return this.handleHideAction({ type: 'HIDE', payload: action.payload.notificationId });\r\n  }\r\n  /**\r\n   * Shift multiple notifications at once\r\n   *\r\n   * @param   notifications List containing the notifications to be shifted\r\n   * @param   distance      Distance to shift (in px)\r\n   * @param   toMakePlace   Flag, defining in which direciton to shift\r\n   * @returns Promise, resolved when done\r\n   */\r\n  private shiftNotifications(notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n      // Are there any notifications to shift?\r\n      if (notifications.length === 0) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const notificationPromises: Array<Promise<void>> = [];\r\n      for (let i: number = notifications.length - 1; i >= 0; i--) {\r\n        notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\r\n      }\r\n      Promise.all(notificationPromises).then(resolve); // Done\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add a new notification to the list of notifications (triggers change detection)\r\n   *\r\n   * @param notification Notification to add to the list of notifications\r\n   */\r\n  private addNotificationToList(notification: NotifierNotification): void {\r\n    this.notifications.push(notification);\r\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\r\n  }\r\n\r\n  /**\r\n   * Remove an existing notification from the list of notifications (triggers change detection)\r\n   *\r\n   * @param notification Notification to be removed from the list of notifications\r\n   */\r\n  private removeNotificationFromList(notification: NotifierNotification): void {\r\n    this.notifications = this.notifications.filter((item: NotifierNotification) => item.component !== notification.component);\r\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\r\n  }\r\n\r\n  /**\r\n   * Remove all notifications from the list (triggers change detection)\r\n   */\r\n  private removeAllNotificationsFromList(): void {\r\n    this.notifications = [];\r\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\r\n  }\r\n\r\n  /**\r\n   * Helper: Find a notification in the notification list by a given notification ID\r\n   *\r\n   * @param   notificationId Notification ID, used for finding notification\r\n   * @returns Notification, undefined if not found\r\n   */\r\n  private findNotificationById(notificationId: string): NotifierNotification | undefined {\r\n    return this.notifications.find((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\r\n  }\r\n\r\n  /**\r\n   * Helper: Find a notification's index by a given notification ID\r\n   *\r\n   * @param   notificationId Notification ID, used for finding a notification's index\r\n   * @returns Notification index, undefined if not found\r\n   */\r\n  private findNotificationIndexById(notificationId: string): number | undefined {\r\n    const notificationIndex: number = this.notifications.findIndex(\r\n      (currentNotification: NotifierNotification) => currentNotification.id === notificationId,\r\n    );\r\n    return notificationIndex !== -1 ? notificationIndex : undefined;\r\n  }\r\n}\r\n","<ul class=\"notifier__container-list\">\r\n  <li class=\"notifier__container-list-item\" *ngFor=\"let notification of notifications; trackBy: identifyNotification\">\r\n    <notifier-notification [notification]=\"notification\" (ready)=\"onNotificationReady($event)\" (dismiss)=\"onNotificationDismiss($event)\" (customAction)=\"onNotificationCustomAction($event)\">\r\n    </notifier-notification>\r\n  </li>\r\n</ul>\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { NotifierContainerComponent } from './components/notifier-container.component';\r\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\r\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\r\nimport { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';\r\nimport { NotifierService } from './services/notifier.service';\r\nimport { NotifierAnimationService } from './services/notifier-animation.service';\r\nimport { NotifierQueueService } from './services/notifier-queue.service';\r\n\r\n/**\r\n * Factory for a notifier configuration with custom options\r\n *\r\n * Sidenote:\r\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\r\n *\r\n * @param   options - Custom notifier options\r\n * @returns - Notifier configuration as result\r\n */\r\nexport function notifierCustomConfigFactory(options: NotifierOptions): NotifierConfig {\r\n  return new NotifierConfig(options);\r\n}\r\n\r\n/**\r\n * Factory for a notifier configuration with default options\r\n *\r\n * Sidenote:\r\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\r\n *\r\n * @returns - Notifier configuration as result\r\n */\r\nexport function notifierDefaultConfigFactory(): NotifierConfig {\r\n  return new NotifierConfig({});\r\n}\r\n\r\n/**\r\n * Notifier module\r\n */\r\n@NgModule({\r\n  declarations: [NotifierContainerComponent, NotifierNotificationComponent],\r\n  exports: [NotifierContainerComponent],\r\n  imports: [CommonModule],\r\n  providers: [\r\n    NotifierAnimationService,\r\n    NotifierService,\r\n    NotifierQueueService,\r\n\r\n    // Provide the default notifier configuration if just the module is imported\r\n    {\r\n      provide: NotifierConfigToken,\r\n      useFactory: notifierDefaultConfigFactory,\r\n    },\r\n  ],\r\n})\r\nexport class NotifierModule {\r\n  /**\r\n   * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\r\n   *\r\n   * @param   [options={}] - Custom notifier options\r\n   * @returns - Notifier module with custom providers\r\n   */\r\n  public static withConfig(options: NotifierOptions = {}): ModuleWithProviders<NotifierModule> {\r\n    return {\r\n      ngModule: NotifierModule,\r\n      providers: [\r\n        // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\r\n        {\r\n          provide: NotifierOptionsToken,\r\n          useValue: options,\r\n        },\r\n\r\n        // Provide a custom notifier configuration, based on the given notifier options\r\n        {\r\n          deps: [NotifierOptionsToken],\r\n          provide: NotifierConfigToken,\r\n          useFactory: notifierCustomConfigFactory,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.NotifierService","i2.NotifierTimerService","i3.NotifierAnimationService","i1.NotifierQueueService","i2.NotifierService","i3","i4.NotifierNotificationComponent"],"mappings":"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"}