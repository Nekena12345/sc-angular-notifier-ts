/**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
export class NotifierNotification {
    /**
     * Constructor
     *
     * @param options Notifier options
     */
    constructor(options) {
        /**
         * The template to customize
         * the appearance of the notification
         */
        this.template = null;
        Object.assign(this, options);
        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser
        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,
        // is not possible due to the action queue concept.
        if (options.id === undefined) {
            this.id = `ID_${new Date().getTime()}`;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1ub3RpZmllci9zcmMvbGliL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUE7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxvQkFBb0I7SUE4Qi9COzs7O09BSUc7SUFDSCxZQUFtQixPQUFvQztRQWhCdkQ7OztXQUdHO1FBQ0ksYUFBUSxHQUFzQixJQUFJLENBQUM7UUFheEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFN0IsZ0lBQWdJO1FBQ2hJLG1JQUFtSTtRQUNuSSxtREFBbUQ7UUFDbkQsSUFBSSxPQUFPLENBQUMsRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9ub3RpZmllci1ub3RpZmljYXRpb24uY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBOb3RpZmljYXRpb25cclxuICpcclxuICogVGhpcyBjbGFzcyBkZXNjcmliZXMgdGhlIHN0cnVjdHVyZSBvZiBhIG5vdGlmaWN0aW9uLCBpbmNsdWRpbmcgYWxsIGluZm9ybWF0aW9uIGl0IG5lZWRzIHRvIGxpdmUsIGFuZCBldmVyeW9uZSBlbHNlIG5lZWRzIHRvIHdvcmsgd2l0aCBpdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOb3RpZmllck5vdGlmaWNhdGlvbiB7XHJcbiAgLyoqXHJcbiAgICogVW5pcXVlIG5vdGlmaWNhdGlvbiBJRCwgY2FuIGJlIHNldCBtYW51YWxseSB0byBjb250cm9sIHRoZSBub3RpZmljYXRpb24gZnJvbSBvdXRzaWRlIGxhdGVyIG9uXHJcbiAgICovXHJcbiAgcHVibGljIGlkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vdGlmaWNhdGlvbiB0eXBlLCB3aWxsIGJlIHVzZWQgZm9yIGNvbnN0cnVjdGluZyBhbiBhcHByb3ByaWF0ZSBjbGFzcyBuYW1lXHJcbiAgICovXHJcbiAgcHVibGljIHR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTm90aWZpY2F0aW9uIG1lc3NhZ2VcclxuICAgKi9cclxuICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICogY3VzdG9tIGV4dHJhcyBkYXRhIHRvIHBhc3MgdG8gbm90aWZpY2F0aW9uIHRlbXBsYXRlXHJcbiAgKi9cclxuICBwdWJsaWMgZXh0cmFzPzogYW55O1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byBjdXN0b21pemVcclxuICAgKiB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhpcyBub3RpZmljYXRpb24sIGNyZWF0ZWQgYW5kIHNldCBkdXJpbmcgY3JlYXRpb24gdGltZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wb25lbnQ6IE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50O1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvclxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgTm90aWZpZXIgb3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XHJcblxyXG4gICAgLy8gSWYgbm90IHNldCBtYW51YWxseSwgd2UgaGF2ZSB0byBjcmVhdGUgYSB1bmlxdWUgbm90aWZpY2F0aW9uIElEIGJ5IG91cnNlbHZlcy4gVGhlIElEIGdlbmVyYXRpb24gcmVsaWVzIG9uIHRoZSBjdXJyZW50IGJyb3dzZXJcclxuICAgIC8vIGRhdGV0aW1lIGluIG1zLCBpbiBwcmF0aWN1bGFyIHRoZSBtb21lbnQgdGhpcyBub3RpZmljYXRpb24gZ2V0cyBjb25zdHJ1Y3RlZC4gQ29uY3VycmVuY3ksIGFuZCB0aHVzIHR3byBJRHMgYmVpbmcgdGhlIGV4YWN0IHNhbWUsXHJcbiAgICAvLyBpcyBub3QgcG9zc2libGUgZHVlIHRvIHRoZSBhY3Rpb24gcXVldWUgY29uY2VwdC5cclxuICAgIGlmIChvcHRpb25zLmlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5pZCA9IGBJRF8ke25ldyBEYXRlKCkuZ2V0VGltZSgpfWA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTm90aWZpY3Rpb24gb3B0aW9uc1xyXG4gKlxyXG4gKiBUaGlzIGludGVyZmFjZSBkZXNjcmliZXMgd2hpY2ggaW5mb3JtYXRpb24gYXJlIG5lZWRlZCB0byBjcmVhdGUgYSBuZXcgbm90aWZpY2F0aW9uLCBvciBpbiBvdGhlciB3b3Jkcywgd2hpY2ggaW5mb3JtYXRpb24gdGhlIGV4dGVybmFsIEFQSVxyXG4gKiBjYWxsIG11c3QgcHJvdmlkZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zIHtcclxuICAvKipcclxuICAgKiBOb3RpZmljYXRpb24gSUQsIG9wdGlvbmFsXHJcbiAgICovXHJcbiAgaWQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vdGlmaWNhdGlvbiB0eXBlXHJcbiAgICovXHJcbiAgdHlwZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBOb3RpZmljYXRpbiBtZXNzYWdlXHJcbiAgICovXHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICogY3VzdG9tIGV4dHJhcyBkYXRhIHRvIFxyXG4gICogcGFzcyB0byAgY3VzdG9tIG5vdGlmaWNhdGlvbiB0ZW1wbGF0ZVxyXG4gICovXHJcbiAgZXh0cmFzPzogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGVtcGxhdGUgdG8gY3VzdG9taXplXHJcbiAgICogdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxyXG4gICAqL1xyXG4gIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PjtcclxufVxyXG4iXX0=